fn main() {
    calculate_fuel_mass();
    program_alarm();
}

fn calculate_fuel_mass() {
    let input = [119031, 111204, 75773, 95544, 69987, 147194, 74024,
        100438,
        86116,
        89945,
        144856,
        123315,
        64102,
        55491,
        95959,
        149174,
        66810,
        134674,
        88921,
        124270,
        60833,
        125667,
        84885,
        57688,
        89059,
        126854,
        93633,
        103791,
        104295,
        137762,
        101216,
        138060,
        103271,
        95822,
        102000,
        66821,
        126916,
        104629,
        87710,
        79852,
        87852,
        149281,
        92055,
        50969,
        62626,
        112069,
        68560,
        66131,
        139961,
        89456,
        100536,
        51338,
        51075,
        112858,
        134878,
        137702,
        60091,
        111576,
        70517,
        131524,
        56162,
        148346,
        62696,
        110191,
        141106,
        54858,
        66248,
        86402,
        132012,
        96367,
        95319,
        133879,
        115031,
        77875,
        129470,
        146650,
        70048,
        147454,
        123076,
        74563,
        94228,
        59920,
        147986,
        92398,
        51890,
        92686,
        110452,
        85205,
        67482,
        87931,
        69535,
        73948,
        114576,
        65958,
        53081,
        132809,
        76088,
        74553,
        121820,
        121214
    ];

    let mut sum = 0;
    for mass in input.iter() {
        let mut fuel = calculate_fuel(&mass);
        while fuel > 0 {
            sum += fuel;
            fuel = calculate_fuel(&fuel)
        }
    }
    println!("sum is {}", sum);
}

fn calculate_fuel(mass: &i32) -> i32 {
    let div: i32 = mass / 3;
    return div - 2;
}

fn program_alarm() {
    let mut input = [1, 12, 2, 3, 1, 1, 2, 3, 1, 3, 4, 3, 1, 5, 0, 3, 2, 1, 13, 19, 1, 9, 19, 23, 1, 6, 23, 27, 2, 27, 9, 31,
        2, 6, 31, 35, 1, 5, 35, 39, 1, 10, 39, 43, 1, 43, 13, 47, 1, 47, 9, 51, 1, 51, 9, 55, 1, 55, 9, 59, 2, 9, 59, 63, 2, 9, 63,
        67, 1, 5, 67, 71, 2, 13, 71, 75, 1, 6, 75, 79, 1, 10, 79, 83, 2, 6, 83, 87, 1, 87, 5, 91, 1, 91, 9, 95, 1, 95, 10, 99, 2, 9,
        99, 103, 1, 5, 103, 107, 1, 5, 107, 111, 2, 111, 10, 115, 1, 6, 115, 119, 2, 10, 119, 123, 1, 6, 123, 127, 1, 127, 5, 131, 2,
        9, 131, 135, 1, 5, 135, 139, 1, 139, 10, 143, 1, 143, 2, 147, 1, 147, 5, 0, 99, 2, 0, 14, 0];
//    let mut input = [1, 9, 10, 3, 2, 3, 11, 0, 99, 30, 40, 50];
    let mut loop_iter = 0;
    while loop_iter < input.len() {
        match input[loop_iter] {
            1 => {
                input[input[loop_iter + 3]] = input[input[loop_iter + 1]] + input[input[loop_iter + 2]];
                loop_iter = loop_iter + 2;
            }
            2 => {
                input[input[loop_iter + 3]] = input[input[loop_iter + 1]] * input[input[loop_iter + 2]];
                loop_iter = loop_iter + 2;
            }
            99 => break,
            _ => ()
        }
        loop_iter = loop_iter + 1;
    }
    println!("Final state is {}", input[0]);
}